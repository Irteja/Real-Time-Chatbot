@page
@model AiPoweredRealTimeChatBot.Pages.AdminMessagesModel
@{
    ViewData["Title"] = "Admin Message Management";
}

<h1>Admin Message Management</h1>

<div class="message-container">
    <div class="messages" id="messages">
        @foreach (var message in Model.Messages)
        {
            <div class="message" data-message-id="@message.Id">
                <strong>@message.Sender</strong> (User: @message.UserId, Session: @message.SessionId,
                @message.Timestamp.ToString("g")):
                <span>@message.Message</span>
                <span class="approval-status">[@(message.IsApproved ? "Approved" : "Not Approved")]</span>
                @if (!message.IsApproved)
                {
                    <button class="approve-button btn btn-sm btn-success ml-2"
                        onclick="approveMessage('@message.Id')">Approve</button>
                }
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect()
            .build();
        connection.start().catch(error => console.error("SignalR Connection Error:", error));


        connection.on("RequestMessage", (msg) => {
            const messageDiv = document.getElementById("messages");
            const div = document.createElement("div");
            
            console.log(JSON.stringify(msg, null, 2));
            

            div.className = "message";
            div.setAttribute("data-message-id", msg.id);
            div.innerHTML = `
                                    <strong>${msg.sender}</strong> (User: ${msg.userId}, Session: ${msg.sessionId}, ${new Date(msg.timestamp).toLocaleString()}): 
                                    <span>${msg.message}</span>
                                    <span class="approval-status">[${msg.isApproved ? "Approved" : "Not Approved"}]</span>
                                    ${!msg.isApproved ? `<button class="approve-button btn btn-sm btn-success ml-2" onclick="approveMessage('${msg.id}')">Approve</button>` : ""}
                                `;
            messageDiv.insertBefore(div,messageDiv.firstChild);
        });

        async function loadMessages() {
            
            try {
                const response = await fetch("http://localhost:5074/api/chat/admin/history", {
                    method: "GET",
                    headers: { "Content-Type": "application/json" }
                });
                if (!response.ok) {
                    console.error(`Failed to load messages: ${response.status}`);
                    return;
                }
                const messages = await response.json();
                const messagesDiv = document.getElementById("messages");
                messagesDiv.innerHTML = "";
                messages.forEach(msg => {
                    const div = document.createElement("div");
                    div.className = "message";
                    div.setAttribute("data-message-id", msg.id);
                    div.innerHTML = `
                                    <strong>${msg.sender}</strong> (User: ${msg.userId}, Session: ${msg.sessionId}, ${new Date(msg.timestamp).toLocaleString()}): 
                                    <span>${msg.message}</span>
                                    <span class="approval-status">[${msg.isApproved ? "Approved" : "Not Approved"}]</span>
                                    ${!msg.isApproved ? `<button class="approve-button btn btn-sm btn-success ml-2" onclick="approveMessage('${msg.id}')">Approve</button>` : ""}
                                `;
                    messagesDiv.appendChild(div);
                });
                await connection.invoke("JoinSession", "admin@example.com");
            } catch (error) {
                console.error("Error loading messages:", error);
            }
        }

        async function approveMessage(messageId) {
            try {
                const response = await fetch(`http://localhost:5074/api/chat/${messageId}/approve`, {
                    method: "PATCH",
                    headers: { "Content-Type": "application/json" }
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error(`Approve Error: ${response.status} - ${errorText}`);
                    alert(`Failed to approve message: ${response.statusText}`);
                    return;
                }
                // Refresh messages
                await loadMessages();
            } catch (error) {
                console.error("Approve Fetch Error:", error);
                alert(`Error: ${error.message}`);
            }
        }

        // Load messages on page load
        loadMessages();
    </script>
}

<style>
    body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background-color: #f5f7fa;
        color: #333;
    }

    .message-container {
        max-width: 1000px;
        margin: 20px auto;
        padding: 30px;
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    h1 {
        font-size: 2.2rem;
        font-weight: 700;
        color: #1a202c;
        text-align: center;
        margin-bottom: 30px;
    }

    .messages {
        border: 1px solid #e2e8f0;
        background: #fafafa;
        padding: 20px;
        min-height: 300px;
        max-height: 600px;
        overflow-y: auto;
        border-radius: 12px;
        margin-bottom: 20px;
    }

    .message {
        margin: 10px 0;
        padding: 15px 20px;
        border-radius: 12px;
        background: #f1f5f9;
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 10px;
        transition: all 0.2s ease;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .message:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .message strong {
        font-weight: 600;
        font-size: 0.95rem;
        color: #1f2937;
        margin-right: 10px;
    }

    .message span {
        font-size: 1rem;
        color: #374151;
        line-height: 1.5;
        flex: 1;
    }

    .approval-status {
        font-size: 0.9rem;
        font-style: italic;
        color: #6b7280;
        margin-left: 10px;
        padding: 4px 8px;
        border-radius: 6px;
        background: #e5e7eb;
    }

    .approval-status[innerText="[Approved]"] {
        background: #d1fae5;
        color: #065f46;
    }

    .approve-button {
        border-radius: 6px;
        padding: 6px 14px;
        font-size: 0.9rem;
        background: #10b981;
        border: none;
        color: white;
        transition: all 0.2s ease;
    }

    .approve-button:hover {
        background: #059669;
        transform: translateY(-1px);
    }

    /* Scrollbar Styling */
    .messages::-webkit-scrollbar {
        width: 8px;
    }

    .messages::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }

    .messages::-webkit-scrollbar-thumb {
        background: #10b981;
        border-radius: 10px;
    }

    .messages::-webkit-scrollbar-thumb:hover {
        background: #059669;
    }

</style>